version: '2'

volumes:
#additional-apps-volumes
  transmission:
    name: transmission
#management-apps-volumes
  portainer:
    name: portainer
  homepage:
    name: homepage
  filerun:
    name: filerun
  filerun_db:
    name: filerun_db
#media-apps-volumes
  radarr:
    name: radarr
  sonarr:
    name: sonarr
  lidarr:
    name: lidarr
  bazarr:
    name: bazarr
  prowlarr:
    name: prowlarr
  plex:
    name: plex
  qbittorrent:
    name: qbittorrent
#monitoring-apps-volumes
  scrutiny:
    name: scrutiny
  scrutiny_db:
    name: scrutiny_db
  uptime-kuma:
    name: uptime-kuma
  speedtest:
    name: speedtest
#security-apps-volumes
  vaultwarden:
    name: vaultwarden
  npm:
    name: npm
  adguard:
    name: adguard
#smarthome-apps-volumes
  homebridge:
    name: homebridge
  airconnect:
    name: airconnect
#we put all containers under the same newtwork
networks:
  internal-network:
    driver: bridge
    name: hms-internal-net
    ipam:
      config:
        - subnet: 10.5.0.0/16

services:
#management-apss
  #Portainer: is an open source, platform agnostic tool for managing containerized applications.
  portainer:
    image: portainer/portainer-ee:latest
    hostname: portainer
    container_name: portainer
    restart: always
    command: -H unix:///var/run/docker.sock
    ports:
      - "9443:9443"
      - "8000:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - 'portainer:/data'
    environment:
      - TZ=${TZ}
    networks:
      - internal-network
  # Homepage - A modern (fully static, fast), secure (fully proxied), highly customizable application dashboard with integrations for more than 25 services and translations for over 15 languages. Easily configured via YAML files (or discovery via docker labels).
  homepage:
    image: ghcr.io/benphelps/homepage:latest
    container_name: homepage
    ports:
      - 3002:3002
    volumes:
      - ${USERDIR}/homepage:/app/config # Make sure your local config directory exists
      - /var/run/docker.sock:/var/run/docker.sock # (optional) For docker integrations
      - /mnt/data:/data
      - /home/cloud:/os
    networks:
      - internal-network
    restart: unless-stopped
  #FileRun: Self-Hosted File Sync and Sharing.
  web:
    image: filerun/filerun
    container_name: filerun
    environment:
      FR_DB_HOST: db
      FR_DB_PORT: 3306
      FR_DB_NAME: filerun
      FR_DB_USER: cloud
      FR_DB_PASS: ${PASSWORD}
      APACHE_RUN_USER: cloud
      APACHE_RUN_USER_ID: ${PUID}
      APACHE_RUN_GROUP: cloud
      APACHE_RUN_GROUP_ID: ${PGID}
    depends_on:
      - db
    ports:
      - "8280:80"
    volumes:
      - 'filerun:/var/www/html'
      - '${USERDIR}:/user-files'
    networks:
      - internal-network
    restart: unless-stopped
  #FileRun database
  db:
    image: mariadb:10.1
    container_name: filerun_db
    environment:
      MYSQL_ROOT_PASSWORD: ${PASSWORD}
      MYSQL_USER: cloud
      MYSQL_PASSWORD: ${PASSWORD}
      MYSQL_DATABASE: filerun
    volumes:
      - 'filerun_db:/var/lib/mysql'
    networks:
      - internal-network
    restart: unless-stopped
#media-apss
  #Bazarr: is a companion application to Sonarr and Radarr that manages and downloads subtitles.
  bazarr:
    image: hotio/bazarr:latest
    container_name: bazarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - 'bazarr:/config'
      - '${MEDIADIR}:/media'
    ports:
      - '6767:6767'
    networks:
      - internal-network
    restart: unless-stopped
  #qBittorrent: an advanced and multi-platform BitTorrent client.
  qbittorrent:
    image: linuxserver/qbittorrent
    container_name: qbittorrent
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - FILE__PASSWORD=${PASSWORD}
    ports:
      - '8080:8080'
      - '6881:6881'
      - '6881:6881/udp'
    volumes:
      - 'qbittorrent:/config'
      - '${DOWNLOADDIR}:/downloads'
    networks:
      - internal-network
    restart: unless-stopped
  #Sonarr: It can monitor multiple RSS feeds for new episodes of your favorite shows and will grab, sort and rename them.
  sonarr:
    image: ghcr.io/linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - 'sonarr:/config'
      - '${USERDIR}/media:/media'
      - '${DOWNLOADDIR}:/downloads'
    ports:
      - '8989:8989'
    networks:
      - internal-network
    restart: unless-stopped
  #Radarr: It can monitor multiple RSS feeds for new movies and will interface with clients and indexers to grab, sort, and rename them.
  radarr:
    image: ghcr.io/linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - 'radarr:/config'
      - '${USERDIR}/media:/media'
      - '${DOWNLOADDIR}:/downloads'
    ports:
      - '7878:7878'
    networks:
      - internal-network
    restart: unless-stopped
  #Lidarr: It can monitor multiple RSS feeds for new albums from your favorite artists and will interface with clients and indexers to grab, sort, and rename them.
  lidarr:
    image: ghcr.io/linuxserver/lidarr
    container_name: lidarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - 'lidarr:/config'
      - '${USERDIR}/media/music:/music'
      - '${DOWNLOADDIR}:/downloads'
    ports:
      - '8686:8686'
    networks:
      - internal-network
    restart: unless-stopped
  #Plex Media Server: one place to find and access all the media that matters to you.
  plex:
    container_name: plex
    image: plexinc/pms-docker
    network_mode: host
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - VERSION=docker
      - TZ=${TZ}
      - PLEX_CLAIM=${PLEX_CLAIM}
    volumes:
      - 'plex:/config:rw'
      - '${USERDIR}:/data:ro'
    restart: always
  #Prowlarr is an indexer manager/proxy built on the popular arr .net/reactjs base stack to integrate with your various PVR apps.
  prowlarr:
    container_name: prowlarr
    image: cr.hotio.dev/hotio/prowlarr
    ports:
      - "9696:9696"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=002
      - TZ=${TZ}
    volumes:
      - 'prowlarr:/config'
    restart: unless-stopped
#monitoring-apps
  #scrutiny - monitor HDD.
  # run this after deployment: docker exec -it scrutiny scrutiny-collector-metrics run
  scrutiny:
    image: ghcr.io/analogj/scrutiny:master-omnibus
    container_name: scrutiny
    cap_add:
      - SYS_RAWIO
#      - SYS_ADMIN #optional if you have nvme
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /run/udev:/run/udev:ro
      - scrutiny:/opt/scrutiny/config
      - scrutiny_db:/opt/scrutiny/influxdb
    ports:
      - 8082:8080 # webapp
      - 8086:8086 # influxDB admin
    devices:
      - /dev/sda:/dev/sda
      - /dev/sdb:/dev/sdb
 #     - /dev/sdc:/dev/sdc
 #     - /dev/sdd:/dev/sdd
 #     - /dev/sde:/dev/sde
    networks:
      - internal-network
    restart: unless-stopped
  #uptime-kuma monitor
  uptime-kuma:
    container_name: uptime-kuma
    image: louislam/uptime-kuma:1
    volumes:
      - uptime-kuma:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 3201:3001
    networks:
      - internal-network
    restart: always
  # Speedtest Tracker - This program runs a speedtest check every hour and graphs the results.
  speedtest:
    container_name: speedtest
    image: henrywhitaker3/speedtest-tracker
    ports:
      - 8765:80
    volumes:
      - speedtest:/config
    environment:
      - TZ=${TZ}
      - PGID=${PGID}
      - PUID=${PUID}
      - OOKLA_EULA_GDPR=true
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
    logging:
      driver: "json-file"
      options:
        max-file: "10"
        max-size: "200k"
    networks:
      - internal-network
    restart: unless-stopped
#security-apps
  #This project was known as Bitwarden_RS and has been renamed to separate itself from the official Bitwarden server in the hopes of avoiding confusion and trademark/branding issues.
  vaultwarden:
    container_name: vaultwarden
    image: vaultwarden/server:latest
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - ADMIN_TOKEN=${BW_TOKEN}
    volumes:
      - vaultwarden:/data
    ports:
      - 280:80
    networks:
      - internal-network
    restart: always
  #nginx-proxy-manager: Expose your services easily and securely.
  npm:
    image: 'jc21/nginx-proxy-manager:latest'
    container_name: nginx-proxy-manager
    ports:
      - '80:80'
      - '81:81'
      - '443:443'
    volumes:
      - 'npm:/data'
      - 'npm:/etc/letsencrypt'
    networks:
      - internal-network
    restart: always
  #ad-adguard
  adguard:
    container_name: adguardhome
    image: adguard/adguardhome
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - adguard:/opt/adguardhome/work
      - adguard:/opt/adguardhome/conf
#    ports:
#      - 53:53/tcp
#      - 53:53/udp
#      - 67:67/udp
#      - 68:68/tcp
#      - 68:68/udp
    network_mode: host
    restart: always
 # Homebridge allows you to integrate with smart home devices that do not natively support HomeKit.
  homebridge:
    container_name: homebridge
    image: oznu/homebridge:latest
    environment:
      - TZ=${TZ}
      - PUID=${PUID}
      - PGID=${PGID}
      - HOMEBRIDGE_CONFIG_UI=1
      - HOMEBRIDGE_CONFIG_UI_PORT=8581
    volumes:
      - homebridge:/homebridge
    restart: unless-stopped
    network_mode: host
 #AirConnect: It allows you to be able to use AirPlay to push audio to Chromecast and UPNP based devices.
  airconnect:
    container_name: airconnect
    image: 1activegeek/airconnect
    network_mode: host
    restart: unless-stopped
#additional-apps
 #Transmission: Download client
  transmission:
    image: ghcr.io/linuxserver/transmission
    container_name: transmission
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
#      - TRANSMISSION_WEB_HOME=/combustion-release/ #optional
#      - USER=username #optional
#      - PASS=password #optional
#      - WHITELIST=iplist #optional
#      - HOST_WHITELIST=dnsnane list #optional
    volumes:
      - transmission:/config
      - '${TRANSMISSION-DIR}:/downloads'
      - '${TRANSMISSION-DIR}:/watch'
    ports:
      - 9091:9091
      - 51413:51413
      - 51413:51413/udp
    networks:
      - internal-network
    restart: unless-stopped
